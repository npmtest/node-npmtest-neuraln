{"/home/travis/build/npmtest/node-npmtest-neuraln/test.js":"/* istanbul instrument in package npmtest_neuraln */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-neuraln/lib.npmtest_neuraln.js":"/* istanbul instrument in package npmtest_neuraln */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_neuraln = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_neuraln = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-neuraln/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-neuraln && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_neuraln */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_neuraln\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_neuraln.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_neuraln.rollup.js'] =\n            local.assetsDict['/assets.npmtest_neuraln.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_neuraln.__dirname + '/lib.npmtest_neuraln.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-neuraln/node_modules/neuraln/index.js":"// Copyright Teleportd Ltd. and other Contributors\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\nvar nn = require('./build/Release/nn.node');\n\nmodule.exports = function(layers, momentum, learning_rate, bias) {\n  var network = new nn.NN(layers, momentum, learning_rate, bias);\n\n  var test_value = function(fn, value) {\n    if(fn(value))\n      throw new Error('Bad string format');\n  }\n\n  return {\n    set_log: function(status) {\n      return network.set_log(status);\n    },\n    train_set_add:function(input, output) {\n      return network.train_set_add(input, output);\n    },\n    train: function(options, callback) {\n      if(typeof options === 'function') {\n        callback = options;\n        options = {};\n      }\n\n      var target_error = 0.01;\n      var iterations = 20000;\n      var step_size = 100;\n      var threads = 4;\n\n      if(typeof options.target_error === 'number')\n        target_error = options.target_error;\n      if(typeof options.iterations === 'number')\n        iterations = options.iterations;\n      if(typeof options.step_size === 'number')\n        step_size = options.step_size;\n      if(typeof options.threads === 'number')\n        threads = options.threads;\n\n      if(options.multithread) {\n        return network.mt_train(target_error, iterations, step_size, threads, callback);\n      }\n      else {\n        network.train(target_error, iterations);\n        if(typeof callback === 'function')\n          return callback();\n      }\n    },\n    run: function(input) {\n      return network.run(input);\n    },\n    to_string: function() {\n      return network.to_string();\n    },\n    get_state: function(compact) {\n      return network.get_state(compact);\n    },\n    to_json: function() {\n      var values = network.to_string().split(' ');\n      var json = {};\n\n      var nr_layers = parseInt(values.shift(), 10);\n      test_value(isNaN, nr_layers);\n\n      json.layers = [];\n      for(var i = 0; i < nr_layers; i++) {\n        json.layers[i] = parseInt(values.shift(), 10);\n        test_value(isNaN, json.layers[i]);\n      }\n\n      json.momentum = parseFloat(values.shift());\n      test_value(isNaN, json.momentum);\n      json.learning_rate = parseFloat(values.shift());\n      test_value(isNaN, json.learning_rate);\n      json.bias = parseFloat(values.shift());\n      test_value(isNaN, json.bias);\n\n      json.biases = [];\n      json.weights = [];\n      for(var l = 0; l < nr_layers; l++) {\n        json.biases[l] = json.biases[l] || [];\n        json.weights[l] = json.weights[l] || [];\n\n        for(var i = 0; i < json.layers[l]; i++) {\n          if(l > 0) {\n            json.biases[l][i] = parseFloat(values.shift());\n            test_value(isNaN, json.biases[l][i]);\n\n            for(var j = 0; j < json.layers[l-1]; j++) {\n              json.weights[l][i] = json.weights[l][i] || [];\n              json.weights[l][i][j] = parseFloat(values.shift());\n              test_value(isNaN, json.weights[l][i][j]);\n            }\n          }\n        }\n      }\n\n      return json;\n    },\n    get_state_json: function() {\n      var values = network.get_state(true).split(' ');\n      var json = {};\n\n      var nr_layers = parseInt(values.shift(), 10);\n      test_value(isNaN, nr_layers);\n\n      json.layers = [];\n      for(var i = 0; i < nr_layers; i++) {\n        json.layers[i] = parseInt(values.shift(), 10);\n        test_value(isNaN, json.layers[i]);\n      }\n\n      var type = values.shift();\n      test_value(function(v) { return (typeof v !== 'string' ||\n                                       !(v === 'full' || v === 'compact')) }, type);\n\n      json.values = [];\n      while(values.length > 0) {\n        var l = parseInt(values.shift());\n        test_value(isNaN, l);\n        var i = parseInt(values.shift());\n        test_value(isNaN, i);\n        var j = parseInt(values.shift());\n        test_value(isNaN, j);\n        var value = parseFloat(values.shift());\n        test_value(isNaN, value);\n\n        json.values[l] = json.values[l] || [];\n        json.values[l][i] = json.values[l][i] || [];\n        json.values[l][i][j] = value;\n      }\n\n      return json;\n    }\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-neuraln/node_modules/neuraln/visu/visu_nn.js":"#!/usr/bin/env node\n/*\n * Nitrogram: visu_nn.js\n *\n * (c) Copyright Teleportd Ltd. 2014, All rights reserved.\n *\n * @author: spolu\n *\n * @log:\n * 2014-09-17 spolu   Creation\n */\n\"use strict\"\n\nvar path = require('path');\nvar fs = require('fs');\n\n//\n// The `visu_nn` tool takes as argument a neural network and generates an html\n// page rendering the neural network using SVG\n//\n// The `visu_nn` command takes a filename as argument containing the neural \n// network string as returned by the `to_string` method. \n// \n\nvar VISU_WIDTH = 800;\nvar VISU_HEIGHT = 600;\nvar W_THRESHOLD = 0.8;\nvar DEFAULT_WMAX = 3;\nvar DEFAULT_WMIN = -3;\n\nvar PRE_RUN = false;\n\nif(process.argv.length < 3) {\n  console.log('Usage: `visu nn.out`');\n  process.exit(0);\n}\n\n\n/* Extracts the NeuralN network data from the file passed as an argument and */\n/* splits the string into an array of value string.                          */\nvar net_str = fs.readFileSync(path.resolve(process.argv[2])).toString();\nvar input = net_str.split(' ');\n\n/* We extract the network structure and parameters first */\nvar B = [], W = [], L = [];\nvar d = parseInt(input.shift(), 10);\n\nfor(var l = 0; l < d; l ++) {\n  L[l] = parseInt(input.shift(), 10);\n};\n\nvar alpha = parseFloat(input.shift());\nvar beta = parseFloat(input.shift());\nvar bias = parseFloat(input.shift());\n\nvar Wmax = PRE_RUN ? 0 : DEFAULT_WMAX;\nvar Wmin = PRE_RUN ? 0 : DEFAULT_WMIN;\n\n\n/* Next we evaluate Wmax and Wmin the maximum and minimum weight used across */\n/* the network, to normalize the coloration of the edges of the network.     */\n/* As this process can be lenghty, we have a DEFAULT_WMAX and a DEFAULT_WMIN */\n/* variable to skip that step once run once.                                 */\nif(PRE_RUN) {\n  for(var l = 0; l < L.length; l ++) {\n    if(l > 0) {\n      for(var i = 0; i < L[l]; i ++) {\n        console.log('>> ' + l + ' ' + i + ' ' + Wmin + ' ' + Wmax);\n        var b = parseFloat(input.shift());\n        for(var j = 0; j < L[l-1]; j++) {\n          var w = parseFloat(input.shift());\n          Wmax = w > Wmax ? w : Wmax;\n          Wmin = w < Wmin ? w : Wmin;\n        }\n      }\n    }\n  }\n  console.log('PRE-RUN:');\n  console.log('alpha: ' + alpha);\n  console.log('bias : ' + bias);\n  console.log('Wmax : ' + Wmax);\n  console.log('Wmin : ' + Wmin);\n  process.exit(0);\n}\n\n/* Finally we create an html file containing SVG data based on the network   */\n/* weights. We use W_THRESHOLD to filter the nodes we want to display or not */\n/* in order to keep the graph readable even when there are a lot of nodes.   */\n\nconsole.log('<svg height=\"' + VISU_HEIGHT + '\" width=\"' + VISU_WIDTH + '\">');\n\nfor(var l = 0; l < L.length; l ++) {\n  if(l > 0) {\n    var x1 = Math.floor(VISU_WIDTH / (L.length - 1) * (l-1));\n    var x2 = Math.floor(VISU_WIDTH / (L.length - 1) * l);\n    for(var i = 0; i < L[l]; i ++) {\n      var y2 = Math.floor(VISU_HEIGHT / (L[l] - 1) * i);\n      var b = parseFloat(input.shift());\n      for(var j = 0; j < L[l-1]; j++) {\n        var y1 = Math.floor(VISU_HEIGHT / (L[l-1] - 1) * j);\n        var w = parseFloat(input.shift());\n\n        if(w > W_THRESHOLD || w < -W_THRESHOLD) {\n          var r = 255;\n          var g = 255;\n          var b = 255;\n          if(w > 0) {\n            r = Math.max(Math.floor(255 - (w/Wmax * 255), 0));\n            g = Math.max(Math.floor(255 - (w/Wmax * 255), 0));\n          }\n          if(w < 0) {\n            b = Math.max(Math.floor(255 - (w/Wmin * 255), 0));\n            g = Math.max(Math.floor(255 - (w/Wmin * 255), 0));\n          }\n          console.log('<line x1=\"' + x1 + \n                      '\" y1=\"' + y1 + \n                      '\" x2=\"' + x2 + \n                      '\" y2=\"' + y2 + \n                      '\" style=\"stroke:rgba(' + r + ',' + g + ',' + b + ', 0.5);stroke-width:1\" />');\n        }\n      }\n    }\n  }\n}\n\nconsole.log('</svg>');\n\n","/home/travis/build/npmtest/node-npmtest-neuraln/node_modules/neuraln/visu/visu_state.js":"#!/usr/bin/env node\n/*\n * Nitrogram: visu_state.js\n *\n * (c) Copyright Teleportd Ltd. 2014, All rights reserved.\n *\n * @author: spolu\n *\n * @log:\n * 2014-09-18 spolu   Creation\n */\n\"use strict\"\n\nvar path = require('path');\nvar fs = require('fs');\n\n//\n// The `visu_state` tool takes as argument the state of a neural network right\n// after classificiation and generates an html page rendering the classification \n// state using SVG\n//\n// The `visu_state` command takes a filename as argument containing the neural \n// network state string as returned by the `get_state` method. \n// \n\nvar VISU_WIDTH = 800;\nvar VISU_HEIGHT = 600;\nvar W_THRESHOLD = 0.3;\nvar DEFAULT_WMAX = 10;\nvar DEFAULT_WMIN = -10;\n\nvar PRE_RUN = false;\n\nif(process.argv.length < 3) {\n  console.log('Usage: `visu user_id.state`');\n  process.exit(0);\n}\n\n\n/* Extracts the NeuralN network state from the file passed as an argument and */\n/* splits the string into an array of value string.                           */\nvar state_str = fs.readFileSync(path.resolve(process.argv[2])).toString();\nvar input = state_str.split(' ');\n\n/* We extract the network structure and parameters first */\nvar W = [], L = [];\nvar d = parseInt(input.shift(), 10);\n\nfor(var l = 0; l < d; l ++) {\n  L[l] = parseInt(input.shift(), 10);\n  W[l] = [];\n};\n\nvar type = input.shift();\nif(type !== 'compact') {\n  console.log('Compact format supported only');\n}\n\nvar Wmax = PRE_RUN ? 0 : DEFAULT_WMAX;\nvar Wmin = PRE_RUN ? 0 : DEFAULT_WMIN;\n\n/* Next we evaluate Wmax and Wmin the maximum and minimum weight used across */\n/* the network, to normalize the coloration of the edges of the network.     */\n/* As this process can be lenghty, we have a DEFAULT_WMAX and a DEFAULT_WMIN */\n/* variable to skip that step once run once.                                 */\nif(PRE_RUN) {\n  while(input.length > 0) {\n    var l = parseInt(input.shift(), 10);\n    var i = parseInt(input.shift(), 10);\n    var j = parseInt(input.shift(), 10);\n    var w = parseFloat(input.shift());\n    Wmax = w > Wmax ? w : Wmax;\n    Wmin = w < Wmin ? w : Wmin;\n  }\n\n  console.log('PRE-RUN:');\n  console.log('Wmax : ' + Wmax);\n  console.log('Wmin : ' + Wmin);\n  process.exit(0);\n}\n\n/* Finally we create an html file containing SVG data based on the network   */\n/* weights. We use W_THRESHOLD to filter the nodes we want to display or not */\n/* in order to keep the graph readable even when there are a lot of nodes.   */\n\nconsole.log('<svg height=\"' + VISU_HEIGHT + '\" width=\"' + VISU_WIDTH + '\">');\n\nwhile(input.length > 0) {\n  if(l <= 0) {\n    conosole.log('Less than 0');\n  }\n  var l = parseInt(input.shift(), 10);\n  var i = parseInt(input.shift(), 10);\n  var j = parseInt(input.shift(), 10);\n  var w = parseFloat(input.shift());\n\n  var x1 = Math.floor(VISU_WIDTH / (L.length - 1) * (l-1));\n  var x2 = Math.floor(VISU_WIDTH / (L.length - 1) * l);\n  var y2 = Math.floor(VISU_HEIGHT / (L[l] - 1) * i);\n  var y1 = Math.floor(VISU_HEIGHT / (L[l-1] - 1) * j);\n\n  if(w > W_THRESHOLD || w < -W_THRESHOLD) {\n    var r = 255;\n    var g = 255;\n    var b = 255;\n    if(w > 0) {\n      r = Math.max(Math.floor(255 - (w/Wmax * 255), 0));\n      g = Math.max(Math.floor(255 - (w/Wmax * 255), 0));\n    }\n    if(w < 0) {\n      b = Math.max(Math.floor(255 - (w/Wmin * 255), 0));\n      g = Math.max(Math.floor(255 - (w/Wmin * 255), 0));\n    }\n    console.log('<line x1=\"' + x1 + \n                '\" y1=\"' + y1 + \n                '\" x2=\"' + x2 + \n                '\" y2=\"' + y2 + \n                '\" style=\"stroke:rgba(' + r + ',' + g + ',' + b + ', 0.5);stroke-width:1\" />');\n  }\n}\n\nconsole.log('</svg>');\n\n"}